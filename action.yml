name: 'Supabase Backup to Storage'
description: 'Auto Stats Action enables generation of repository statistics like total number of files, number of words in every file, etc.'

branding:
  icon: database
  color: green

inputs:
  supabase-postgre-url: 
    description: 'used to dump DB, example: postgresql://postgres:[YOUR-PASSWORD]@db.<ref>.supabase.co:5432/postgres'
    required: true
  supabase-url: 
    description: 'used to identify your project, example: https://lcspcmmpolegvalxkfsu.supabase.co'
    required: true
  supabase-service-key: 
    description: 'used to upload to you bucket, must be service_role key not anon example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....'
    required: true
  supabase-bucket:
    description: 'Bucket name, example: "blog-db-backup"'
    required: true
  delete-older-backups:
    description: 'Delete older backups'
    required: false
    default: 'true'
  delete-older-backups-days:
    description: 'Number of days to keep backups'
    required: false
    default: '7'
  folder-name:
    description: 'Folder name, example: "blog-db-backup", if not provided it will place baackups in root folder'
    required: false
    default: ''



runs:
  using: 'composite'

    # runs-on: ubuntu-latest
    # env:
    #   supabase_db_url: ${{ secrets.SUPABASE_DB_URL }}   # For example: postgresql://postgres:[YOUR-PASSWORD]@db.<ref>.supabase.co:5432/postgres
    # steps:
    #   - uses: actions/checkout@v2
    #   - uses: supabase/setup-cli@v1
    #     with:
    #       version: latest
    #   - name: Backup roles
    #     run: supabase db dump --db-url "$supabase_db_url" -f roles.sql --role-only
    #   - name: Backup schema
    #     run: supabase db dump --db-url "$supabase_db_url" -f schema.sql
    #   - name: Backup data
    #     run: supabase db dump --db-url "$supabase_db_url" -f data.sql --data-only --use-copy

  # image: './Dockerfile'
  # env:
  #   SUPABASE_POSTRGE_URL: ${{ inputs.supabase-postgre-url }}
  #   SUPABASE_URL: ${{ inputs.supabase-url }}
  #   SUPABASE_SERVICE_KEY: ${{ inputs.supabase-service-key }}
  #   SUPABASE_BUCKET: ${{ inputs.supabase-bucket }}
  #   DELETE_OLDER_BACKUPS: ${{ inputs.delete-older-backups }}
  #   DELETE_OLDER_BACKUPS_DAYS: ${{ inputs.delete-older-backups-days }}
  #   SUPABASE_FOLDER_NAME: ${{ inputs.folder-name }}
  steps:
  - name: 'Checkout'
    uses: actions/checkout@v2
    
    # Install Bun globally using the official script
  # This is the recommended way to install Bun.
  - name: 'Install Bun'
    shell: bash
    run: |
        curl -fsSL https://bun.sh/install | bash
        # Add Bun to the PATH for subsequent steps
        echo "$HOME/.bun/bin" >> $GITHUB_PATH

  # --- Add step to install dependencies using Bun ---
  - name: 'Install Dependencies'
    shell: bash
    run: bun install
  # -------------------------------------------------

  - name: 'Setup Supabase CLI'
    uses: supabase/setup-cli@v1
    with:
      version: latest
  
  # Ensure the data directory exists before dumping
  - name: 'Create data directory'
    shell: bash
    run: mkdir -p data

  - name: 'Backup roles'
    shell: bash
    run: supabase db dump --db-url "$SUPABASE_POSTRGE_URL" -f data/roles.sql --role-only

  - name: 'Backup schema'
    shell: bash
    run: supabase db dump --db-url "$SUPABASE_POSTRGE_URL" -f data/schema.sql
  
  - name: 'Backup data'
    shell: bash
    run: supabase db dump --db-url "$SUPABASE_POSTRGE_URL" -f data/data.sql --data-only --use-copy
  
  - name: 'Upload to Supabase Storage'
    env:
      SUPABASE_POSTRGE_URL: ${{ inputs.supabase-postgre-url }}
      SUPABASE_URL: ${{ inputs.supabase-url }}
      SUPABASE_SERVICE_KEY: ${{ inputs.supabase-service-key }}
      SUPABASE_BUCKET: ${{ inputs.supabase-bucket }}
      DELETE_OLDER_BACKUPS: ${{ inputs.delete-older-backups }}
      DELETE_OLDER_BACKUPS_DAYS: ${{ inputs.delete-older-backups-days }}
      SUPABASE_FOLDER_NAME: ${{ inputs.folder-name }}
    shell: bash
    run: bun run ./CI/index.ts
  

  